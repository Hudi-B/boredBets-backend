// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using boredBets.Models;

#nullable disable

namespace boredBets.Migrations
{
    [DbContext(typeof(BoredbetsContext))]
    [Migration("20240208172217_thirteenth")]
    partial class thirteenth
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_general_ci")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("Horse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<int?>("Age")
                        .HasColumnType("int(11)")
                        .HasColumnName("age");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<bool?>("Stallion")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("stallion");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("horses", (string)null);
                });

            modelBuilder.Entity("Jockey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<int?>("Quality")
                        .HasColumnType("int(11)")
                        .HasColumnName("quality");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("jockey", (string)null);
                });

            modelBuilder.Entity("Participant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("HorseId")
                        .HasColumnType("char(36)")
                        .HasColumnName("horse_id");

                    b.Property<Guid?>("JockeyId")
                        .HasColumnType("char(36)")
                        .HasColumnName("jockey_id");

                    b.Property<int?>("Placement")
                        .HasColumnType("int(11)")
                        .HasColumnName("placement");

                    b.Property<Guid?>("RaceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("race_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "HorseId" }, "horse_id");

                    b.HasIndex(new[] { "JockeyId" }, "jockey_id");

                    b.HasIndex(new[] { "RaceId" }, "race_id");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("boredBets.Models.Race", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("RaceScheduled")
                        .HasColumnType("datetime")
                        .HasColumnName("race_scheduled");

                    b.Property<double>("RaceTime")
                        .HasColumnType("double")
                        .HasColumnName("race_time");

                    b.Property<Guid?>("TrackId")
                        .HasColumnType("char(36)")
                        .HasColumnName("track_id");

                    b.Property<string>("Weather")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("weather");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TrackId" }, "track_id");

                    b.ToTable("races", (string)null);
                });

            modelBuilder.Entity("boredBets.Models.Track", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Country")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("country");

                    b.Property<float?>("Length")
                        .HasColumnType("float")
                        .HasColumnName("length");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<bool?>("Oval")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("oval");

                    b.Property<string>("Surface")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("surface");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("tracks", (string)null);
                });

            modelBuilder.Entity("boredBets.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("boredBets.Models.UserBet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("Id");

                    b.Property<float?>("BetAmount")
                        .HasColumnType("float")
                        .HasColumnName("bet_amount");

                    b.Property<Guid?>("HorseId")
                        .HasColumnType("char(36)")
                        .HasColumnName("horse_id");

                    b.Property<Guid?>("RaceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("race_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "HorseId" }, "horse_id")
                        .HasDatabaseName("horse_id1");

                    b.HasIndex(new[] { "RaceId" }, "race_id")
                        .HasDatabaseName("race_id1");

                    b.ToTable("user_bets", (string)null);
                });

            modelBuilder.Entity("boredBets.Models.UserCard", b =>
                {
                    b.Property<int>("CreditcardNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("creditcard_num");

                    b.Property<string>("CardName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("card_name");

                    b.Property<int>("Cvc")
                        .HasColumnType("int")
                        .HasColumnName("cvc");

                    b.Property<string>("ExpDate")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("exp_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("CreditcardNum")
                        .HasName("PRIMARY");

                    b.HasIndex("UserId");

                    b.ToTable("user_cards", (string)null);
                });

            modelBuilder.Entity("boredBets.Models.UserDetail", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("birth_date");

                    b.Property<string>("Fullname")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("fullname");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.ToTable("user_details", (string)null);
                });

            modelBuilder.Entity("Participant", b =>
                {
                    b.HasOne("Horse", "Horse")
                        .WithMany("Participants")
                        .HasForeignKey("HorseId")
                        .HasConstraintName("participant_ibfk_2");

                    b.HasOne("Jockey", "Jockey")
                        .WithMany("Participants")
                        .HasForeignKey("JockeyId")
                        .HasConstraintName("participant_ibfk_3");

                    b.HasOne("boredBets.Models.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId")
                        .HasConstraintName("participant_ibfk_1");

                    b.Navigation("Horse");

                    b.Navigation("Jockey");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("boredBets.Models.Race", b =>
                {
                    b.HasOne("boredBets.Models.Track", "Track")
                        .WithMany("Races")
                        .HasForeignKey("TrackId")
                        .HasConstraintName("races_ibfk_1");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("boredBets.Models.UserBet", b =>
                {
                    b.HasOne("Horse", "Horse")
                        .WithMany("UserBets")
                        .HasForeignKey("HorseId")
                        .HasConstraintName("user_bets_ibfk_2");

                    b.HasOne("boredBets.Models.Race", "Race")
                        .WithMany("UserBets")
                        .HasForeignKey("RaceId")
                        .HasConstraintName("user_bets_ibfk_1");

                    b.HasOne("boredBets.Models.User", "User")
                        .WithMany("UserBets")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("user_bets_ibfk_3");

                    b.Navigation("Horse");

                    b.Navigation("Race");

                    b.Navigation("User");
                });

            modelBuilder.Entity("boredBets.Models.UserCard", b =>
                {
                    b.HasOne("boredBets.Models.User", "User")
                        .WithMany("UserCards")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("user_cards_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("boredBets.Models.UserDetail", b =>
                {
                    b.HasOne("boredBets.Models.User", "User")
                        .WithOne("UserDetail")
                        .HasForeignKey("boredBets.Models.UserDetail", "UserId")
                        .IsRequired()
                        .HasConstraintName("user_details_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Horse", b =>
                {
                    b.Navigation("Participants");

                    b.Navigation("UserBets");
                });

            modelBuilder.Entity("Jockey", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("boredBets.Models.Race", b =>
                {
                    b.Navigation("UserBets");
                });

            modelBuilder.Entity("boredBets.Models.Track", b =>
                {
                    b.Navigation("Races");
                });

            modelBuilder.Entity("boredBets.Models.User", b =>
                {
                    b.Navigation("UserBets");

                    b.Navigation("UserCards");

                    b.Navigation("UserDetail");
                });
#pragma warning restore 612, 618
        }
    }
}
